...-...
//Time complexity = O(n^2) , brute force , initial instinct

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
            
        for(int i = 0 ; i < nums.size() ; i++)
        {
            for(int j = 0 ; j < nums.size() ; j++)
            {
                if(i !=j )
                {
                    if(nums[i] + nums[j] == target)
                    {
                        return {i , j};
                    }
                }
            }
        }
        return {0};
    }
    
     
};


//time complexity = O(n Log n) , used sorting , imrpoved version

vector<int> twoSum(vector<int>& nums, int target) {
            
    unordered_map <int , int> sol;
    for(int i = 0 ; i < nums.size() ; i++)
    {
         sol[nums[i] = i;
    }

    int complement;
    for(int i = 0 ; i < nums.size() ; i++)
    {
        complement = target - nums[i];
        if(sol.count(complement) >0 && sol[complement] != i)
        {
            return {i , sol[complement]};
        }
    }
    return {};
}





